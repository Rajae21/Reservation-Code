{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aff307bb-3cda-410e-8228-48e668c68d94",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Author: Rajae Taylor\n",
    "# Date Created: 12/12/23\n",
    "# Course: ITT103\n",
    "# Purpose: N/A\n",
    "\n",
    "FIRST_CLASS_CAPACITY = 27\n",
    "BUSINESS_CLASS_CAPACITY = 38\n",
    "ECONOMY_CLASS_CAPACITY = 56\n",
    "\n",
    "first_class_seats = [[0 for _ in range(2)] for _ in range(FIRST_CLASS_CAPACITY)]\n",
    "business_class_seats = [[0 for _ in range(2)] for _ in range(BUSINESS_CLASS_CAPACITY)]\n",
    "economy_class_seats = [[0 for _ in range(2)] for _ in range(ECONOMY_CLASS_CAPACITY)]\n",
    "\n",
    "def display_menu():\n",
    "    print(\"UCC Signature Express Limited - <Move Easy With UCC SE>\")\n",
    "    print(\"Reservation Options:\")\n",
    "    print(\"First Class (F/f)\")\n",
    "    print(\"Business Class (B/b)\")\n",
    "    print(\"Economy Class (E/e)\")\n",
    "    print(\"Quit or Cancel (Q/q)\")\n",
    "    print(\"Please select an option:\")\n",
    "\n",
    "def reserve_seat(class_type=None):\n",
    "    while True:\n",
    "        display_menu()\n",
    "        user_choice = input().upper()\n",
    "\n",
    "        if user_choice == 'Q':\n",
    "            break\n",
    "        elif user_choice == 'F':\n",
    "            class_type = \"First Class\"\n",
    "            total_capacity = FIRST_CLASS_CAPACITY\n",
    "        elif user_choice == 'B':\n",
    "            class_type = \"Business Class\"\n",
    "            total_capacity = BUSINESS_CLASS_CAPACITY\n",
    "        elif user_choice == 'E':\n",
    "            class_type = \"Economy Class\"\n",
    "            total_capacity = ECONOMY_CLASS_CAPACITY\n",
    "        else:\n",
    "            print(\"Invalid input!\")\n",
    "            continue\n",
    "\n",
    "        print(f\"Reservation Type: {class_type}\")\n",
    "        print(f\"Total number of seats: {total_capacity}\")\n",
    "        # Calculate and display total number of reserved seats for the selected class\n",
    "        # <Calculate Reserved Seats for the respective class>\n",
    "\n",
    "        # Process reservation dependent on the user's selection\n",
    "        # How to reserve a seat: Prompt row number, seat type, validate, and reserve\n",
    "\n",
    "        # Check if all seats are reserved\n",
    "        if all(seat[0] == 1 for seat in first_class_seats) or all(seat[0] == 1 for seat in business_class_seats) or all(seat[0] == 1 for seat in economy_class_seats):\n",
    "            print(\"No more available seats!\")\n",
    "            continue\n",
    "\n",
    "        # Prompts the user for row number and seat type (window or aisle)\n",
    "        row_number = int(input(\"Enter row number: \"))\n",
    "        seat_type = input(\"Enter seat type (W for window, A for aisle): \")\n",
    "\n",
    "        if row_number <= 0:\n",
    "            print(\"Number must be positive and greater than zero!\")\n",
    "            break  # Exit the program on negative or zero row number\n",
    "\n",
    "        # Reserving the seat\n",
    "        if class_type == \"First Class\":\n",
    "            selected_class_seats = first_class_seats\n",
    "        elif class_type == \"Business Class\":\n",
    "            selected_class_seats = business_class_seats\n",
    "        elif class_type == \"Economy Class\":\n",
    "            selected_class_seats = economy_class_seats\n",
    "\n",
    "        if selected_class_seats[row_number - 1][0] == 0:  # Assuming seats are 0-indexed\n",
    "            selected_class_seats[row_number - 1][0] = 1\n",
    "            selected_class_seats[row_number - 1][1] = seat_type\n",
    "            print(f\"Reserving seat: row {row_number} column {seat_type}\")\n",
    "        else:\n",
    "            print(\"Seat already reserved. Please select another seat.\")\n",
    "\n",
    "# Main Program\n",
    "while True:\n",
    "    reserve_seat()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
